// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	models "creditlimit-connector/app/models"

	mock "github.com/stretchr/testify/mock"
)

// CreditClient is an autogenerated mock type for the CreditClient type
type CreditClient struct {
	mock.Mock
}

// AdjustCreditLimit provides a mock function with given fields: req
func (_m *CreditClient) AdjustCreditLimit(req models.EncryptQueryCreditLimit) models.EncryptQueryCreditLimit {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AdjustCreditLimit")
	}

	var r0 models.EncryptQueryCreditLimit
	if rf, ok := ret.Get(0).(func(models.EncryptQueryCreditLimit) models.EncryptQueryCreditLimit); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.EncryptQueryCreditLimit)
	}

	return r0
}

// QueryGoodAsset provides a mock function with given fields: req
func (_m *CreditClient) QueryGoodAsset(req models.EncryptQueryCreditLimit) models.EncryptQueryCreditLimit {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for QueryGoodAsset")
	}

	var r0 models.EncryptQueryCreditLimit
	if rf, ok := ret.Get(0).(func(models.EncryptQueryCreditLimit) models.EncryptQueryCreditLimit); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.EncryptQueryCreditLimit)
	}

	return r0
}

// QueryTempCreditLimit provides a mock function with given fields: req
func (_m *CreditClient) QueryTempCreditLimit(req models.EncryptQueryCreditLimit) models.EncryptQueryCreditLimit {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for QueryTempCreditLimit")
	}

	var r0 models.EncryptQueryCreditLimit
	if rf, ok := ret.Get(0).(func(models.EncryptQueryCreditLimit) models.EncryptQueryCreditLimit); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.EncryptQueryCreditLimit)
	}

	return r0
}

// NewCreditClient creates a new instance of CreditClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreditClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreditClient {
	mock := &CreditClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
